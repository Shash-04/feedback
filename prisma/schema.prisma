generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PlacementFeedback {
  id                         String   @id @default(uuid())
  studentName                String
  studentId                  String
  department                 String
  placementCommunication     String
  trainingRelevance          String
  mockInterviewsHelpful      String
  coordinationRating         String
  suggestions                String
  wishlistCompanies          String
  createdAt                  DateTime @default(now())
}

model InterviewFeedback {
  id                         String   @id @default(uuid())
  studentName                String
  studentId                  String
  companyName                String

  aptitudeTestRating         String
  interviewerProfessionalism String
  questionRelevance          String
  briefingHelpfulness        String
  confidenceRating           String

  aptitudeExperience         String
  interviewQuestionTypes     String
  toughestPart               String
  aptitudeImprovementSuggestions String
  assessmentAccuracy         String

  createdAt                  DateTime @default(now())
}

model CompanyFeedback {
  id                   String   @id @default(uuid())
  studentName          String
  companyName          String

  technicalSkills      String
  problemSolving       String
  communicationSkills  String
  overallSatisfaction  String

  taskUnderstanding    String
  adaptability         String
  additionalComments   String?

  createdAt            DateTime @default(now())
}

//////////////////////////////////////////////////////////
// âœ… Dynamic Form Builder Models (Appended Below)
//////////////////////////////////////////////////////////

model FeedbackForm {
  id         String             @id @default(uuid())
  title      String
  questions  FeedbackQuestion[]
  responses  FeedbackResponse[]
  createdAt  DateTime           @default(now())
}

model FeedbackQuestion {
  id        String           @id @default(uuid())
  form      FeedbackForm     @relation(fields: [formId], references: [id],onDelete: Cascade)
  formId    String
  question  String
  type      QuestionType
  order     Int
  required  Boolean          @default(false)
  answers   Answer[]
}

model FeedbackResponse {
  id         String     @id @default(uuid())
  form       FeedbackForm @relation(fields: [formId], references: [id])
  formId     String
  answers    Answer[]
  createdAt  DateTime   @default(now())
}

model Answer {
  id         String             @id @default(uuid())
  response   FeedbackResponse   @relation(fields: [responseId], references: [id])
  responseId String

  question   FeedbackQuestion   @relation(fields: [questionId], references: [id])
  questionId String

  answer     String
}

enum QuestionType {
  DESCRIPTIVE
  RATING
}
